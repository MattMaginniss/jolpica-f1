# Generated by Django 4.2.6 on 2023-11-13 22:06

from django.db import migrations, connection
from django.core.management import call_command
from jolpica.formula_one.models.round import RoundEntry
from jolpica.formula_one.standings import SeasonData, Group
import subprocess
from time import sleep


def add_test_data(apps, schema_editor):
    call_command("loaddata", "tests/fixtures/users.json")
    # call_command("loaddata", "tests/fixtures/2000s_data.json.gz")
    # call_command("loaddata", "tests/fixtures/legacy_data.json.gz")
    sql_file_path = "dump/tables.sql"
    # Replace 'your_database_name' with the actual database name
    # Replace 'your_user' with the actual database user
    # Optionally, you can add '-h' for host and '-p' for port if needed
    command = [
        'psql',
        '-h', 'localhost',
        '-d', 'test_jolpica',
        '-U', 'postgres',
        '-f', sql_file_path
    ]
    subprocess.run(command, check=True)
    command = [
        'psql',
        '-h', 'localhost',
        '-d', 'test_jolpica',
        '-U', 'postgres',
        '-f', "dump/import.sql"
    ]
    subprocess.run(command, check=True)
    print("db import done")
    sleep(5)


def create_driver_standings(apps, schema_editor):
    Season = apps.get_model("formula_one", "Season")
    DriverChampionship = apps.get_model("formula_one", "DriverChampionship")
    TeamChampionship = apps.get_model("formula_one", "TeamChampionship")
    RoundEntry = apps.get_model("formula_one", "RoundEntry")

    team_standings = []
    driver_standings = []
    print(RoundEntry.objects.count())
    print(RoundEntry.objects.filter(round__season__year=1997).count())
    sleep(2)

    for season in Season.objects.all().select_related("championship_system"):
        season_data = SeasonData.from_season(season)
        driver_standings.extend(test1 := season_data.generate_standings(Group.DRIVER))
        team_standings.extend(test2 := season_data.generate_standings(Group.TEAM))
        if season.year == 1980:
            print(season.year)
            print(len(test1))
            print(test1)
            
    DriverChampionship.objects.bulk_create(driver_standings)
    TeamChampionship.objects.bulk_create(team_standings)

class Migration(migrations.Migration):
    dependencies = []

    operations = [
        migrations.RunPython(add_test_data),
        migrations.RunPython(create_driver_standings),
    ]
